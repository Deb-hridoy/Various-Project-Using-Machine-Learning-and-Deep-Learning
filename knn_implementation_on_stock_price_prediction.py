# -*- coding: utf-8 -*-
"""KNN implementation on stock price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHvsdc1cn1p0NBVuIvoISdwXTSblGgFE
"""

import sklearn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

!pip install -q quandl

import quandl

df_data = quandl.get('WIKI/GOOGL')

df_data.head()

df_data.isnull().sum()

df_data.shape

plt.figure(figsize=(16,8))
plt.plot(df_data['Close'], label='Closing price')
plt.show()

"""## **Classification problem : Buy (+1) and sell(-1) the stock**"""

df_data['Open - Close'] = df_data['Open'] - df_data['Close']
df_data['High - Low'] = df_data['High'] - df_data['Low']
"""
To drop the null values
df_data = df_data.dropna()
"""
#df_data.head()

"""# **Input features to predict whether customer should buy or sell the stock**"""

x_data = df_data[['Open - Close', 'High - Low']]
x_data.head()

y_data = np.where(df_data['Close'].shift(-1)>df_data['Close'],1, -1)
y_data

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.25, random_state=42)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

"""# **Implementation of KNN Classifier**"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn import neighbors
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

# using gridsearchcv to find the parameter
params = {'n_neighbors':[2,3,4,5,6,7,8,9,10,11,12,13,14,15]}
knn = neighbors.KNeighborsClassifier()
model_0 = GridSearchCV(knn, params, cv=15)

# fit the model
model_0.fit(x_train, y_train)

# prediction
train_pred = model_0.predict(x_train)
test_pred = model_0.predict(x_test)

# Accuracy score
accuracy_train = accuracy_score(y_train, train_pred)
accuracy_test = accuracy_score(y_test, test_pred)

# print what happend
print(f"Accuracy train:{accuracy_train*100:.2f}%")
print(f"Accuracy test:{accuracy_test*100:.2f}%")

predict_dataframe = pd.DataFrame({'Actual class': y_test, 'Predicted class': test_pred})
predict_dataframe.head(10)

"""## Implementation of KNN regressor"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn import neighbors

x_train_reg, x_test_reg, y_train_reg, y_test_reg = train_test_split(x_data, y_data, test_size=0.25, random_state=42)

# using gridsearchcv to find the parameter
params = {'n_neighbors':[2,3,4,5,6,7,8,9,10,11,12,13,14,15]}
knn_reg = neighbors.KNeighborsRegressor()
model_1 = GridSearchCV(knn_reg, params, cv=15)

# fit the model and make predictions
model_1.fit(x_train_reg, y_train_reg)

predict_reg = model_1.predict(x_test_reg)

# RMSE
rms = np.sqrt(np.mean(np.power((np.array(y_test_reg)-np.array(predict_reg)),2)))
rms

predict_reg_dataframe = pd.DataFrame({'Actual class': y_test_reg, 'Predicted class': predict_reg})
predict_reg_dataframe.head(10)