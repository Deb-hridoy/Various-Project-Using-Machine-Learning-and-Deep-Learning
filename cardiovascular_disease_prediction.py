# -*- coding: utf-8 -*-
"""Cardiovascular disease prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12xUIqeDJ1f6u76_E9Idz1ODzBQwiPC21
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('cardio_train.csv', sep=';')

df.head()

df.shape

df.isnull().sum()

df_1 = df.drop('id', axis=1)

df_1['cardio'].value_counts()

sns.countplot(x='gender',hue='cardio', data=df_1)

# Convert the age days to year
df_1['age year'] = (df_1['age']/365).round(0)

df_1.head()

sns.set(rc={"figure.figsize": (20, 15)})
sns.countplot(x='age year',hue='cardio', data=df_1)

df_2 = df_1.drop('age', axis=1)

df_2.head()

# Move the age year coloumn in first position
df_2 = df_2[['age year', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']]

df_2.head()

"""## Make the dataframe into X and Y"""

df_3 = df_2.drop('cardio',axis=1)

x = df_3

x.head()

y_data = df_2['cardio']

y_data.head()

"""## Feature selection (Univariate method)"""

from sklearn.feature_selection import SelectKBest

from sklearn.feature_selection import f_classif

select_feature = SelectKBest(score_func = f_classif)

select_feature_fit = select_feature.fit(x, y_data)

data_score = pd.DataFrame(select_feature_fit.scores_, columns = ['Column Score'])

column_name = pd.DataFrame(x.columns, columns=['Column name'])

data_features = pd.concat([column_name, data_score], axis=1)

data_features

# Select the column on the base of top score
top_features_data = data_features.nlargest(8, 'Column Score')

top_features_data

df_4 = df_3.drop(['height', 'gender', 'alco'], axis=1)

df_4.head()

x_data = df_4

x_data.head()

"""## Split the dataset into train and test"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.3, random_state=42)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

x_train.head()

"""## Train and Test the model

### Random Forest
"""

from sklearn.ensemble import RandomForestClassifier

model_0 = RandomForestClassifier()

model_0_fit = model_0.fit(x_train, y_train)

model_predict = model_0_fit.predict(x_test)

df_predict = pd.DataFrame({'Actual value': y_test, 'Predicted value':model_predict})

df_predict.head()

print(f"Model Accuracy: {model_0_fit.score(x_test, y_test)}")

"""### Decision Forest"""

from sklearn.tree import DecisionTreeClassifier

model_1 = DecisionTreeClassifier()

model_1_fit = model_1.fit(x_train, y_train)

model_1_fit.score(x_test, y_test)