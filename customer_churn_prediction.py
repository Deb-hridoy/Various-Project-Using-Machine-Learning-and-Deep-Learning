# -*- coding: utf-8 -*-
"""Customer Churn Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10U80XTD1qLZNLQo-EYSlB2nUFNymRXKo
"""

from google.colab import files
uploaded = files.upload()

from os import ST_NOSUID
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('Customer-Churn-Prediction.csv')

df.head()

df.shape

df.isnull().sum()

sns.countplot(df['Churn'])

df['Churn'].value_counts()

churnred = df[df.Churn == 'Yes'].shape[0]
retained = df[df.Churn == 'No'].shape[0]

churnred

retained

# Customer left the company
customer_left = (churnred/(churnred+retained)) *100
print(f" Customer left:{customer_left:.2f}%")

# Customer retained on the company
customer_retain = (retained/(churnred+retained)) * 100
print(f"Customer retained:{customer_retain:.2f}%")

df.describe()

"""### Some visualization"""

sns.countplot(x='gender', hue='Churn', data=df)

df['gender'].value_counts()

sns.countplot(x='MultipleLines', hue='Churn', data=df)

df['MultipleLines'].value_counts()

sns.countplot(x='InternetService', hue='Churn', data=df)

"""### Preprocessing the Data"""

# Drop Customer id
df_1 = df.drop('customerID', axis=1)

df_1.shape

df_1.isnull().sum()

from sklearn.preprocessing import LabelEncoder

for column in df_1.columns:
    if np.issubdtype(df_1[column].dtype, np.number):
        continue
    df_1[column] = LabelEncoder().fit_transform(df_1[column])

df_1.head()

"""### Extract the X and Y data"""

x_data = df_1.iloc[:, :-1]

x_data.shape

x_data.head()

y_data = df_1.iloc[:,19]

y_data.head()

"""### Normalize the data for better computation"""

from sklearn.preprocessing import StandardScaler

normalize_x = StandardScaler().fit_transform(x_data)

normalize_x.shape

normalize_x

"""### Split the into train and test data"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(normalize_x, y_data, test_size=0.25, random_state=42)

x_train.shape, y_train.shape, x_test.shape, y_test.shape

"""### Train and Predict the model"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model_fit = model.fit(x_train, y_train)

model_prediction = model_fit.predict(x_test)

model_prediction

df_2 = pd.DataFrame({'Actual':y_test, 'Prediction':model_prediction})

df_2.head()

"""### Performance Metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Accuracy score
accuracy = accuracy_score(y_test, model_prediction)
print(f"Accuracy score:{accuracy*100:.2f}%")

confu_matrix = confusion_matrix(y_test, model_prediction)

confu_matrix

classifi_report = classification_report(y_test, model_prediction)
print(classifi_report)

